Для работы с профилем и авторизацией, создаем две таблицы: user и profile

// user.entity.ts
import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';
import { Profile } from './profile.entity';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  email: string;

  @Column()
  password: string;

  @OneToOne(() => Profile, { cascade: true })
  @JoinColumn()
  profile: Profile;
}

// profile.entity.ts
import { Entity, Column, PrimaryGeneratedColumn, OneToOne } from 'typeorm';
import { User } from './user.entity';

@Entity()
export class Profile {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  phone: string;

  @OneToOne(() => User, (user) => user.profile)
  user: User;
}


Регистрация пользователя и создания профиля в базе данных


import { Controller, Post, Body, UseGuards, Req } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UserService } from './user.service';
import { ProfileService } from './profile.service';
import { CreateUserDto } from './dto/create-user.dto';
import { CreateProfileDto } from './dto/create-profile.dto';
import { LocalAuthGuard } from './guards/local-auth.guard';

@Controller()
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly userService: UserService,
    private readonly profileService: ProfileService,
  ) {}

  @Post('auth/register')
  async register(
    @Body() createUserDto: CreateUserDto,
    @Body() createProfileDto: CreateProfileDto,
  ) {
    const user = await this.userService.create(createUserDto);
    const profile = await this.profileService.create(createProfileDto, user.id);

    return { user, profile };
  }

  // Для удаления и редактирования добавляем проверку прав пользователя
  @UseGuards(LocalAuthGuard)
  @Post('profile/delete')
  async deleteProfile(@Req() req) {
    const userId = req.user.id;
    // Проверяем, что пользователь может удалить только свой профиль или администратор
    const canDelete = await this.profileService.canDeleteProfile(userId);
    if (canDelete) {
      await this.profileService.delete(userId);
      await this.userService.delete(userId);
      return { message: 'Profile deleted successfully' };
    } else {
      throw new ForbiddenException('You are not authorized to perform this action');
    }
  }

  @UseGuards(LocalAuthGuard)
  @Post('profile/edit')
  async editProfile(@Req() req, @Body() createProfileDto: CreateProfileDto) {
    const userId = req.user.id;
    // Проверяем, что пользователь может редактировать только свой профиль или администратор
    const canEdit = await this.profileService.canEditProfile(userId);
    if (canEdit) {
      const profile = await this.profileService.edit(userId, createProfileDto);
      return { profile };
    } else {
      throw new ForbiddenException('You are not authorized to perform this action');
    }
  }
}